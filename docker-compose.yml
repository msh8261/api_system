networks:
  pipeline_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/16"
          gateway: 172.18.0.1


services:
  app:
    container_name: app
    build:
      context: ./ # This specifies the build context (where your Dockerfile is located)
      dockerfile: Dockerfile  # This specifies the Dockerfile name (use the correct path if different)
    ports:
      - "8022:8022"
    depends_on:
      - redis
      - kafka
    networks:
      - pipeline_network
    env_file:
      - .env 
    restart: always  # Optional: Automatically restart app container in case of failure
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8022/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8022"]  # Added command to run main in backend folder


  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # Using environment variables
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - pipeline_network


  zookeeper:
    platform: linux/amd64
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - '32181:32181'
      - '2888:2888'
      - '3888:3888'
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 32181
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"


  broker-1:
    platform: linux/amd64
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: broker-1
    hostname: broker-1
    restart: unless-stopped
    ports:
      - '9092:9092'
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-1:29091,EXTERNAL://localhost:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_JMX_PORT: 19101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -vz localhost 9092
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"


  kafka: 
    container_name: kafka 
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8087:8080
    depends_on:
      broker-1:
        condition: service_started
    environment:
      KAFKA_CLUSTERS_0_NAME: broker-1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-1:29091
      KAFKA_CLUSTERS_0_METRICS_PORT: 19101
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"


  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker-1:
        condition: service_started
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker-1:29091'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - pipeline_network


  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.4.0
    depends_on:
      broker-1:
        condition: service_started
      schema-registry: 
        condition: service_started
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://rest-proxy:8082
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker-1:29091'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'      
    networks:
      - pipeline_network


  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./frontend:/usr/share/nginx/html  # Pointing to the directory where your frontend HTML file is located
    ports:
      - "8090:80"  # Map port 80 inside the container to port 8080 on the host
    depends_on:
      - app  # Ensure that the app container is ready before starting Nginx
    networks:
      - pipeline_network
