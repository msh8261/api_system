networks:
  pipeline_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.18.0.0/16"
          gateway: 172.18.0.1


services:
  app:
    container_name: app
    build:
      context: ./ # This specifies the build context (where your Dockerfile is located)
      dockerfile: Dockerfile  # This specifies the Dockerfile name (use the correct path if different)
    ports:
      - "8022:8022"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      # kafka:
      #   condition: service_healthy  
    networks:
      - pipeline_network
    env_file:
      - .env 
    restart: always  # Optional: Automatically restart app container in case of failure
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8022/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8022"]  # Added command to run main in backend folder



  zookeeper:
    platform: linux/amd64
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - '32181:32181'
      - '2888:2888'
      - '3888:3888'
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 32181
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"


  broker-1:
    platform: linux/amd64
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: broker-1
    hostname: broker-1
    restart: unless-stopped
    ports:
      - '9092:9092'
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-1:29091,EXTERNAL://localhost:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 19101
      KAFKA_JMX_HOSTNAME: broker-1
    healthcheck:
      test: nc -vz localhost 9092
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"


  kafka: 
    container_name: kafka 
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8087:8080
    depends_on:
      broker-1:
        condition: service_started
    environment:
      KAFKA_CLUSTERS_0_NAME: broker-1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-1:29091
      KAFKA_CLUSTERS_0_METRICS_PORT: 19101
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - pipeline_network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8087"]     
    #   interval: 10s
    #   retries: 3
    #   timeout: 10s


  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker-1:
        condition: service_started
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker-1:29091'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - pipeline_network


  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.4.0
    depends_on:
      broker-1:
        condition: service_started
      schema-registry: 
        condition: service_started
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://rest-proxy:8082
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker-1:29091'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'      
    networks:
      - pipeline_network


  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # Using environment variables
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - pipeline_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Use the redis-cli to ping the Redis server
      interval: 30s  # Interval between health check attempts
      retries: 5  # Number of retries before the container is considered unhealthy
      start_period: 20s  # Initial delay before starting the health checks
      timeout: 10s  # Timeout for each health check


  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: chatbot
      MYSQL_USER: user
      MYSQL_PASSWORD: rootpassword
    ports:
      - "3307:3306"
    command: --init-file /data/application/mysql_init.sql
    volumes:
        - ./backend/mysql_init.sql:/data/application/mysql_init.sql
    networks:
      - pipeline_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s


  mongodb:
    image: mongo:latest  # Use the official MongoDB image from Docker Hub
    container_name: mongodb  # Name the container for easy reference
    ports:
      - "27017:27017"  # Expose MongoDB's default port to the host machine
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root  # Username for the root user
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword  # Password for the root user
      - MONGO_INITDB_DATABASE=chatbot  # Optional: default database to create
    volumes:
      - mongodb_data:/data/db  # Persist MongoDB data in a named volume
    networks:
      - pipeline_network  
    healthcheck:    
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]  # Run MongoDB ping command
      interval: 30s  # Interval between health check attempts
      retries: 5  # Number of retries before the container is considered unhealthy
      start_period: 20s  # Initial delay before starting the health checks
      timeout: 10s  # Timeout for each health check


  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./frontend:/usr/share/nginx/html  # Pointing to the directory where your frontend HTML file is located
    ports:
      - "8090:80"  # Map port 80 inside the container to port 8080 on the host
    depends_on:
      - app  # Ensure that the app container is ready before starting Nginx
    networks:
      - pipeline_network



volumes:
  mongodb_data:
    driver: local


